import telebot
import sqlite3
from datetime import datetime, timedelta
from config import API_TOKEN, ADMIN_PASSWORD

bot = telebot.TeleBot(API_TOKEN)

DATABASE_SUBSCRIPTION_KEYS = "/home/user/DB/key/subscribe_key.db"

def get_db_connection(db_file):
    return sqlite3.connect(db_file)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    username = message.from_user.username if message.from_user.username else "–¥—Ä—É–≥"
    welcome_message = f"""
    <b>–ü—Ä–∏–≤–µ—Ç, @{username}!</b>

    –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –æ–ø—ã—Ç –µ—â—ë –ª—É—á—à–µ! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:

    - üîÆ <b>/predict</b> - –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤ 1 –∫–ª–∏–∫: –ù–∞–∂–º–∏ –∏ —É–∑–Ω–∞–π —Å–≤–æ—é —É–¥–∞—á—É!
    - üîë <b>/subscription</b> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: –í–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏.
    - üìà <b>/status</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    - ‚ùì <b>/help</b> - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö.

    –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!
    """
    markup = telebot.types.InlineKeyboardMarkup()
    button_group = telebot.types.InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", url="https://t.me/+ivgTss3rnQQ2Nzgy")
    markup.add(button_group)
    bot.send_message(message.chat.id, welcome_message, reply_markup=markup, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥–∞ /predict
@bot.message_handler(commands=['predict'])
def send_launch_button(message):
    try:
        user_id = message.from_user.id
        is_active, _, _, _ = check_subscription(user_id)
        if is_active:
            markup = telebot.types.InlineKeyboardMarkup()
            button = telebot.types.InlineKeyboardButton(
                text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                url="https://t.me/rpgta5rp_bot/roulette_prediction"
            )
            markup.add(button)
            bot.send_message(
                message.chat.id, 
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscription –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /subscription
@bot.message_handler(commands=['subscription'])
def handle_subscription(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, activate_subscription)

def activate_subscription(message):
    key = message.text
    user_id = message.from_user.id
    if activate_key(key, user_id):
        bot.send_message(message.chat.id, "–ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /predict –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    else:
        bot.send_message(message.chat.id, "–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

def activate_key(key, user_id):
    with get_db_connection(DATABASE_SUBSCRIPTION_KEYS) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM subscription_keys WHERE key = ? AND is_activated = 0', (key,))
        if cursor.fetchone():
            cursor.execute('UPDATE subscription_keys SET is_activated = 1, user_name = ?, activation_date = ? WHERE key = ?', (str(user_id), datetime.now().strftime('%Y-%m-%d %H:%M:%S'), key))
            conn.commit()
            return True
    return False

def check_subscription(user_id):
    with get_db_connection(DATABASE_SUBSCRIPTION_KEYS) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT key, activation_date, duration_days FROM subscription_keys WHERE user_name = ? AND is_activated = 1 ORDER BY activation_date DESC LIMIT 1', (str(user_id),))
        result = cursor.fetchone()
        if result:
            key, activation_date, duration_days = result
            activation_date = datetime.strptime(activation_date, '%Y-%m-%d %H:%M:%S')
            if datetime.now() <= activation_date + timedelta(days=duration_days):
                remaining_days = (activation_date + timedelta(days=duration_days) - datetime.now()).days
                return True, key, activation_date.strftime('%Y-%m-%d'), remaining_days
    return False, None, None, 0

# –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=['status'])
def send_subscription_status(message):
    user_id = message.from_user.id
    is_active, key, activation_date, remaining_days = check_subscription(user_id)
    if is_active:
        bot.reply_to(message, f"–í–∞—à –∫–ª—é—á –ø–æ–¥–ø–∏—Å–∫–∏: {key}\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activation_date}\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {remaining_days}")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
–ö–æ–º–∞–Ω–¥—ã:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
/predict - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫).
/subscription - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏.
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['admin'])
def admin_login(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(msg, admin_password_check)

def admin_password_check(message):
    if message.text == ADMIN_PASSWORD:
        bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π:")
        show_activated_keys(message)
        bot.send_message(message.chat.id, "–î–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /revoke –∫–ª—é—á")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

def show_activated_keys(message):
    with get_db_connection(DATABASE_SUBSCRIPTION_KEYS) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT key, user_name, activation_date, duration_days FROM subscription_keys WHERE is_activated = 1 LIMIT 10')
        keys = cursor.fetchall()
        if keys:
            response = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:\n"
            for key, user_name, activation_date, duration_days in keys:
                response += f"–ö–ª—é—á: {key}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}, –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {activation_date}, –°—Ä–æ–∫: {duration_days} –¥–Ω–µ–π\n"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.")

@bot.message_handler(commands=['revoke'])
def revoke_key(message):
    if not message.text.startswith("/revoke "):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /revoke –∫–ª—é—á")
        return
    key_to_revoke = message.text.split(" ", 1)[1]
    with get_db_connection(DATABASE_SUBSCRIPTION_KEYS) as conn:
        cursor = conn.cursor()
        cursor.execute('UPDATE subscription_keys SET is_activated = 0, user_name = NULL, activation_date = NULL WHERE key = ?', (key_to_revoke,))
        if cursor.rowcount > 0:
            conn.commit()
            bot.send_message(message.chat.id, f"–ö–ª—é—á {key_to_revoke} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω –∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        else:
            bot.send_message(message.chat.id, "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
